on mine:
	{dd.hammer::%player%} is set
	player's held item is a pickaxe or shovel
	cancel drops
	set {_pos1} to location of event-block
	set {_pos2} to location of event-block
	increase y coordinate of {_pos1} by 1
	reduce y coordinate of {_pos2} by 1
	
	if facing of player is west or east:
		increase z coordinate of {_pos2} by 1
		reduce z coordinate of {_pos1} by 1
	
	else if facing of player is north or south:
		increase x coordinate of {_pos1} by 1
		reduce x coordinate of {_pos2} by 1
	
	create a bound with id "hammer.%player%" within {_pos1} and {_pos2}
	set {_bound} to bound with id "hammer.%player%"
	#send all of the blocks within bound {_bound} #debug only
	loop all of the blocks within bound {_bound}:
		loop-block is not bedrock
		
		if {dd.d2i::%player%} is true:
			if player has enough space for drops of block using player's tool:
				cancel event
				set {_drops::*} to drops of loop-block using player's tool
				loop {_drops::*}:
					#send "%loop-value-2%" #debug only
					give player loop-value-2
				set loop-block to air
			else:
				break loop-block naturally using player's tool
		
		else:
			break loop-block naturally using player's tool

			
	damage player's tool by 1
	delete bound with id "hammer.%player%"
	
command /hammer:
	trigger:
		if {dd.hammer::%player%} is true:
			clear {dd.hammer::%player%}
			send "%{dd::f::prefix}% Der %{dd::f::c2}%Hammer-Modus %{dd::f::c1}%wurde ausgeschaltet."
		
		else:
			set {dd.hammer::%player%} to true
			send "%{dd::f::prefix}% Der %{dd::f::c2}%Hammer-Modus %{dd::f::c1}%wurde eingeschaltet."
			
on load:
	loadModule("Spieler: Hammer")